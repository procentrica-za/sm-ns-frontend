"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("tns-core-modules/color");
var shape_enum_1 = require("./shape.enum");
var Shadow = /** @class */ (function () {
    function Shadow() {
    }
    Shadow.apply = function (tnsView, data) {
        if (tnsView.android &&
            android.os.Build.VERSION.SDK_INT >=
                android.os.Build.VERSION_CODES.LOLLIPOP) {
            Shadow.applyOnAndroid(tnsView, Shadow.getDefaults(data));
        }
        else if (tnsView.ios) {
            Shadow.applyOnIOS(tnsView, Shadow.getDefaults(data));
        }
    };
    Shadow.getDefaults = function (data) {
        return Object.assign({}, data, {
            shape: data.shape || Shadow.DEFAULT_SHAPE,
            bgcolor: data.bgcolor || Shadow.DEFAULT_BGCOLOR,
            shadowColor: data.shadowColor ||
                Shadow.DEFAULT_SHADOW_COLOR,
        });
    };
    Shadow.applyOnAndroid = function (tnsView, data) {
        var nativeView = tnsView.android;
        var shape = new android.graphics.drawable.GradientDrawable();
        shape.setShape(android.graphics.drawable.GradientDrawable[data.shape]);
        shape.setColor(android.graphics.Color.parseColor(data.bgcolor));
        shape.setCornerRadius(Shadow.androidDipToPx(nativeView, data.cornerRadius));
        nativeView.setBackgroundDrawable(shape);
        nativeView.setElevation(Shadow.androidDipToPx(nativeView, data.elevation));
        nativeView.setTranslationZ(Shadow.androidDipToPx(nativeView, data.translationZ));
        if (nativeView.getStateListAnimator()) {
            this.overrideDefaultAnimator(nativeView, data);
        }
    };
    Shadow.overrideDefaultAnimator = function (nativeView, data) {
        var sla = new android.animation.StateListAnimator();
        var ObjectAnimator = android.animation.ObjectAnimator;
        var AnimatorSet = android.animation.AnimatorSet;
        var shortAnimTime = android.R.integer.config_shortAnimTime;
        var buttonDuration = nativeView.getContext().getResources().getInteger(shortAnimTime) / 2;
        var pressedElevation = this.androidDipToPx(nativeView, 2);
        var pressedZ = this.androidDipToPx(nativeView, 4);
        var elevation = this.androidDipToPx(nativeView, data.elevation);
        var z = this.androidDipToPx(nativeView, data.translationZ || 0);
        var pressedSet = new AnimatorSet();
        var notPressedSet = new AnimatorSet();
        var defaultSet = new AnimatorSet();
        pressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [pressedZ])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [pressedElevation])
                .setDuration(0),
        ]));
        notPressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [z])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [elevation])
                .setDuration(0),
        ]));
        defaultSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [0]).setDuration(0),
            ObjectAnimator.ofFloat(nativeView, "elevation", [0]).setDuration(0),
        ]));
        sla.addState([android.R.attr.state_pressed, android.R.attr.state_enabled], pressedSet);
        sla.addState([android.R.attr.state_enabled], notPressedSet);
        sla.addState([], defaultSet);
        nativeView.setStateListAnimator(sla);
    };
    Shadow.applyOnIOS = function (tnsView, data) {
        var nativeView = tnsView.ios;
        var elevation = parseFloat((data.elevation - 0).toFixed(2));
        nativeView.layer.maskToBounds = false;
        nativeView.layer.shadowColor = new color_1.Color(data.shadowColor).ios.CGColor;
        nativeView.layer.shadowOffset =
            data.shadowOffset ?
                CGSizeMake(0, parseFloat(String(data.shadowOffset))) :
                CGSizeMake(0, 0.54 * elevation - 0.14);
        nativeView.layer.shadowOpacity =
            data.shadowOpacity ?
                parseFloat(String(data.shadowOpacity)) :
                0.006 * elevation + 0.25;
        nativeView.layer.shadowRadius =
            data.shadowRadius ?
                parseFloat(String(data.shadowRadius)) :
                0.66 * elevation - 0.5;
    };
    Shadow.androidDipToPx = function (nativeView, dip) {
        var metrics = nativeView.getContext().getResources().getDisplayMetrics();
        return android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, dip, metrics);
    };
    Shadow.DEFAULT_SHAPE = shape_enum_1.ShapeEnum.RECTANGLE;
    Shadow.DEFAULT_BGCOLOR = '#FFFFFF';
    Shadow.DEFAULT_SHADOW_COLOR = '#000000';
    return Shadow;
}());
exports.Shadow = Shadow;
//# sourceMappingURL=data:application/json;base64,